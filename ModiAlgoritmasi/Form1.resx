<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="backgroundWorker1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="timer1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>214, 17</value>
  </metadata>
  <data name="ModiAlgoRkran.Text" xml:space="preserve">
    <value>MODI ALGORİTMASI
Bu yöntemde bir tesisten bir pazara gönderim yapmanın maliyetinin (Cij), tesisten gönderme (Ui) ve pazarlama (Vj) maliyetleri olarak iki gölge maliyetin oluştuğu varsayılır.
Modi yönteminde yapılması gereken ilk işlem, Ui ve Vj olarak gösterilen dual değişken değerlerinin hesaplanmasıdır. Ui ve Vj değerlerinin hesaplanmasında, dolu gözelerden yararlanılır. (Ui + Vj) toplamının dolu gözelerdeki Cij katsayısına eşit olması gerekir.
Ui ve Vj olarak (m + n) bilinmeyene karşılık (m + n - 1) temel değişken, dolayısıyla 
(m + n - 1) denklem vardır. Bilinmeyen sayısı, denklem sayısından bir fazla olduğu için
 Ui veya Vj ’lerden keyfi olarak seçilen bir tanesine rasgele bir değer (genellikle sıfır) verip kalanlar hesaplanabilir.
Ui ve Vj değerlerinin belirlenmesinden sonra boş gözelerin gizli maliyetlerinin hesaplanması
gerekir. 
Gizli maliyetler,

dij = Cij - (Ui + Vj)

bağıntısından hesaplanır. Gizli Maliyet için üç olası durum söz konusudur.
•dij &gt; 0 ise, bu gözenin doldurulması toplam maliyeti artıracağından, söz konusu gözenin boş bırakılmasına karar verilir.
•dij &lt; 0 ise, bu gözenin doldurulması toplam maliyeti azaltacağından, hali hazırda boş olan gözenin doldurulmasına karar verilir.
•dij = 0 ise, bu gözenin doldurulmasıyla ulaşılacak toplam maliyet bir önceki toplam maliyete eşit olacağından, alternatif çözümlerden söz edilir.</value>
  </data>
  <data name="Metin.Text" xml:space="preserve">
    <value>ULAŞTIRMA PROBLEMLERİ
Ulaştırma modeli, doğrusal programlama probleminin özel bir şeklidir. Bu modelde, malların kaynaklardan (fabrika gibi )hedeflere (depo gibi) taşınmasıyla ilgilenir. Buradaki amaç bir taraftan hedefin talep gereksinimleri ve kaynakların arz miktarlarında denge sağlarken, diğer taraftan da her bir kaynaktan her bir hedefe yapılan taşımaların toplam maliyetini minimum kılacak taşıma miktarının belirlemektedir.
Ulaştırma problemlerinde başlangıç çözümü bulmak için kulanılan yöntemler şu şekilde
sıralanabilir:
1. Kuzey-Batı Köşesi Yöntemi
2. En Düşük Maliyetler Yöntemi
3. Vogel Yaklaşımı (VAM)

Ulaştırma modelinde elde edilen temel çözümün en düşük toplam ulaştırma maliyetine sahip olup olmadığı denetlenir. Eğer değil ise elde edilen çözüm bu amaç doğrultusunda değiştirilir. 
Optimizasyon için kullanılacak yöntemlerden biri Modified Distribution (MODI) yöntemidir.</value>
  </data>
  <metadata name="timer2.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>301, 17</value>
  </metadata>
  <metadata name="$this.TrayHeight" type="System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>25</value>
  </metadata>
</root>